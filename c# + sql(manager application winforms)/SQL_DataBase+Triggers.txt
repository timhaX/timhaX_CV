USE manager;
DROP TABLE IF EXISTS Payment;
DROP TABLE IF EXISTS Prepayment;
DROP TABLE IF EXISTS Orders;
DROP TRIGGER IF EXISTS ordersupdate;
DROP TRIGGER IF EXISTS remainsinsert;
CREATE TABLE Orders( 
id int IDENTITY(1,1) PRIMARY KEY NOT NULL, 
data_time date DEFAULT GETDATE(), 
summ int NOT NULL, 
order_sum int DEFAULT 0
); 
CREATE TABLE Prepayment( 
id int IDENTITY(1,1) PRIMARY KEY NOT NULL, 
data_time date DEFAULT GETDATE(), 
summ int NOT NULL, 
remains int, 
); 
CREATE TABLE Payment( 
order_id int REFERENCES Orders(id) NOT NULL, 
prepayment_id int REFERENCES Prepayment(id) NOT NULL, 
payment_sum int NOT NULL 
); 
GO
CREATE TRIGGER ordersupdate
ON Payment
AFTER INSERT, UPDATE
AS
IF @@ROWCOUNT=0

 RETURN
IF EXISTS(
    SELECT
     *
    FROM Orders o
    JOIN inserted i ON o.order_sum >= o.summ 
    WHERE
     i.order_id = o.id
  )
  
RETURN 
IF EXISTS(
    SELECT
     *
    FROM Prepayment d
    JOIN inserted i ON d.remains <= d.summ-d.summ 
    WHERE
     i.prepayment_id = d.id
  )
  
RETURN
IF EXISTS(
    SELECT
     *
    FROM Prepayment d
    JOIN inserted i ON d.remains < i.payment_sum 
    WHERE
     i.prepayment_id = d.id
  )
  
RETURN
IF EXISTS(
    SELECT
     *
    FROM Orders e
    JOIN inserted i ON e.order_sum > e.summ - i.payment_sum
    WHERE
     i.order_id = e.id
  )
  
RETURN
SET NOCOUNT ON
BEGIN
UPDATE Orders

SET order_sum = o.order_sum + i.payment_sum
FROM Orders o JOIN
(SELECT order_id, SUM(payment_sum)payment_sum FROM inserted GROUP BY order_id) i
ON o.id=i.order_id
END
BEGIN
UPDATE Prepayment

SET remains = o.remains - i.payment_sum
FROM Prepayment o JOIN
(SELECT prepayment_id, SUM(payment_sum)payment_sum FROM inserted GROUP BY prepayment_id) i
ON  o.id=i.prepayment_id
END
GO
CREATE TRIGGER remainsinsert
ON Prepayment
AFTER INSERT
AS
IF @@ROWCOUNT=0

 RETURN

SET NOCOUNT ON
BEGIN
UPDATE Prepayment
SET remains=i.summ
FROM inserted i
WHERE Prepayment.id=i.id
END
GO